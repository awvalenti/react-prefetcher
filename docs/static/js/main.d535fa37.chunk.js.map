{"version":3,"sources":["components/NetworkRequestLister/index.js","components/NoPrefetchApp/index.js","components/OnRenderPrefetchApp/index.js","App.js","serviceWorker.js","index.js"],"names":["NetworkReqestLister","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_refreshList","setState","requests","performance","getEntriesByType","filter","entry","name","indexOf","state","intervalHandle","setInterval","clearInterval","react_default","a","createElement","className","map","request","Math","round","startTime","duration","React","Component","NoPrefetchApp","clicked","_this2","class","onClick","src","rand","alt","OnRenderPrefetchApp","imageUrl","react_prefetcher","onRenderAssets","App","noPrefetchRand","random","onRenderPrefetchRand","href","target","rel","NoPrefetchApp_NoPrefetchApp","NetworkRequestLister_NetworkReqestLister","OnRenderPrefetchApp_OnRenderPrefetchApp","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d535fa37.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class NetworkReqestLister extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { requests: [] };\n  }\n\n  componentDidMount() {\n    this.intervalHandle = setInterval(this._refreshList, 200);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalHandle);\n  }\n\n  _refreshList = () => {\n    this.setState({\n      requests: performance\n        .getEntriesByType('resource')\n        .filter(entry => entry.name.indexOf(this.props.filter) > -1),\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"section\">\n        <h3>Network Inspector:</h3>\n        <table>\n          <tr>\n            <th>Time from Page load(ms)</th>\n            <th>Resource URL</th>\n            <th>Time Taken to Download(ms)</th>\n          </tr>\n          {this.state.requests.map(request => (\n            <tr>\n              <td>{Math.round(request.startTime)}</td>\n              <td>{request.name}</td>\n              <td>{Math.round(request.duration)}</td>\n            </tr>\n          ))}\n        </table>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nexport default class NoPrefetchApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { clicked: false };\n  }\n\n  render() {\n    return (\n      <div class=\"section\">\n        <div\n          class=\"cta-button\"\n          onClick={() => this.setState({ clicked: true })}\n        >\n          Click to show image\n        </div>\n        {this.state.clicked ? (\n          <img\n            src={\n              'https://assets.imgix.net/examples/kingfisher.jpg?w=200&rand=' +\n              this.props.rand\n            }\n            alt=\"\"\n          />\n        ) : null}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Prefetcher from 'react-prefetcher';\n\nexport default class OnRenderPrefetchApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { clicked: false };\n    this.imageUrl =\n      'https://assets.imgix.net/examples/kingfisher.jpg?w=200&rand=' +\n      this.props.rand;\n  }\n\n  render() {\n    return (\n      <div class=\"section\">\n        <Prefetcher onRenderAssets={[this.imageUrl]}>\n          <div\n            class=\"cta-button\"\n            onClick={() => this.setState({ clicked: true })}\n          >\n            Click to show image\n          </div>\n        </Prefetcher>\n        {this.state.clicked ? <img src={this.imageUrl} alt=\"\" /> : null}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport NetworkRequestLister from './components/NetworkRequestLister';\nimport NoPrefetchApp from './components/NoPrefetchApp';\nimport OnRenderPrefetchApp from './components/OnRenderPrefetchApp';\n\nclass App extends React.Component {\n  noPrefetchRand = Math.random();\n  onRenderPrefetchRand = Math.random();\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <span className=\"title\">Component without any Prefetching</span>\n          <a\n            className=\"code-link\"\n            href=\"https://github.com/manojVivek/react-prefetcher/blob/master/demo/src/components/NoPrefetchApp/index.js\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            (see code)\n          </a>\n        </div>\n        <div className=\"wrapper\">\n          <div className=\"left\">\n            <NoPrefetchApp rand={this.noPrefetchRand} />\n          </div>\n          <div className=\"right\">\n            <NetworkRequestLister filter={this.noPrefetchRand} />\n          </div>\n        </div>\n        <div className=\"header\">\n          <span className=\"title\">Component with OnRender Prefetching</span>\n          <a\n            className=\"code-link\"\n            href=\"https://github.com/manojVivek/react-prefetcher/blob/master/demo/src/components/OnRenderPrefetchApp/index.js\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            (see code)\n          </a>\n        </div>\n        <div className=\"wrapper\">\n          <div className=\"left\">\n            <OnRenderPrefetchApp rand={this.onRenderPrefetchRand} />\n          </div>\n          <div className=\"right\">\n            <NetworkRequestLister filter={this.onRenderPrefetchRand} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}